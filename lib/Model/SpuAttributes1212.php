<?php
/**
 * SpuAttributes1212
 *
 * PHP version 5
 *
 * @category Class
 * @package  Douyin\Open
 * @author   抖音小开
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 */

namespace Douyin\Open\Model;

use \ArrayAccess;
use \Douyin\Open\ObjectSerializer;

/**
 * SpuAttributes1212 Class Doc Comment
 *
 * @category Class
 * @description 费用政策
 * @package  Douyin\Open
 * @author   抖音小开
 */
class SpuAttributes1212 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Spu_attributes1212';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'breakfast' => '\Douyin\Open\Model\SpuAttributes1212Breakfast',
'extra_bed' => '\Douyin\Open\Model\SpuAttributes1212Response',
'extra' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'breakfast' => null,
'extra_bed' => null,
'extra' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'breakfast' => 'breakfast',
'extra_bed' => 'extra_bed',
'extra' => 'extra'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'breakfast' => 'setBreakfast',
'extra_bed' => 'setExtraBed',
'extra' => 'setExtra'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'breakfast' => 'getBreakfast',
'extra_bed' => 'getExtraBed',
'extra' => 'getExtra'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['breakfast'] = isset($data['breakfast']) ? $data['breakfast'] : null;
        $this->container['extra_bed'] = isset($data['extra_bed']) ? $data['extra_bed'] : null;
        $this->container['extra'] = isset($data['extra']) ? $data['extra'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['breakfast'] === null) {
            $invalidProperties[] = "'breakfast' can't be null";
        }
        if ($this->container['extra_bed'] === null) {
            $invalidProperties[] = "'extra_bed' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets breakfast
     *
     * @return \Douyin\Open\Model\SpuAttributes1212Breakfast
     */
    public function getBreakfast()
    {
        return $this->container['breakfast'];
    }

    /**
     * Sets breakfast
     *
     * @param \Douyin\Open\Model\SpuAttributes1212Breakfast $breakfast breakfast
     *
     * @return $this
     */
    public function setBreakfast($breakfast)
    {
        $this->container['breakfast'] = $breakfast;

        return $this;
    }

    /**
     * Gets extra_bed
     *
     * @return \Douyin\Open\Model\SpuAttributes1212Response
     */
    public function getExtraBed()
    {
        return $this->container['extra_bed'];
    }

    /**
     * Sets extra_bed
     *
     * @param \Douyin\Open\Model\SpuAttributes1212Response $extra_bed extra_bed
     *
     * @return $this
     */
    public function setExtraBed($extra_bed)
    {
        $this->container['extra_bed'] = $extra_bed;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return string
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     *
     * @param string $extra 费用政策自定义内容
     *
     * @return $this
     */
    public function setExtra($extra)
    {
        $this->container['extra'] = $extra;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
